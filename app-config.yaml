app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: The Flying Birds

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    host: localhost
  csp:
    connect-src: ["'self'", 'http:', 'https:', 'avatars.githubusercontent.com']
    img-src: ["'self'", 'data:', 'avatars.githubusercontent.com']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      apps:
        - $include: github-app-tfb-backstage-credentials.yaml
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # '/test':
  #   target: 'https://example.com'
  #   changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options
auth:
  environment: development
  providers:
    github:
      development:
        clientId: ${LOCAL_AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${LOCAL_AUTH_GITHUB_CLIENT_SECRET}
        callbackUrl: http://localhost:7007/api/auth/github/handler/frame
      production:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        callbackUrl: https://backstage.theflyingbirds.net/api/auth/github/handler/frame
catalog:
  providers:
    github:
      # the provider ID can be any camelCase string
      providerId:
        organization: 'theflyingbirdsmc' # string
        catalogPath: '/**/catalog-info.yaml' # string
        filters:
          branch: 'main' # string
          repository: '.*' # Regex
        schedule: # optional; same options as in TaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 2 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
  # import:
  #   entityFilename: catalog-info.yaml
  #   pullRequestBranchName: backstage-integration
  # rules:
  #   - allow: [Component, System, API, Resource, Location]
  # locations:
  #   # Local example data, file locations are relative to the backend process, typically `packages/backend`
  #   - type: file
  #     target: ../../examples/entities.yaml

  #   # Local example template
  #   - type: file
  #     target: ../../examples/template/template.yaml
  #     rules:
  #       - allow: [Template]

  #   # Local example organizational data
  #   - type: file
  #     target: ../../examples/org.yaml
  #     rules:
  #       - allow: [User, Group]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
# kubernetes:
#   serviceLocatorMethod:
#     type: 'multiTenant'
#   clusterLocatorMethods:
#     - type: 'config'
#       clusters:
#         - url: https://rancher.theflyingbirds.net/k8s/clusters/local
#           name: eagle
#           authProvider: 'default'
#           skipTLSVerify: false
#           skipMetricsLookup: true
#           serviceAccountToken: ${RANCHER_TOKEN}
#           dashboardUrl: https://rancher.theflyingbirds.net # url copied from running the command: minikube service kubernetes-dashboard -n kubernetes-dashboard